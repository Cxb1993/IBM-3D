/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2016 OpenFOAM Foundation
     \\/     M anipulation  | Copyright (C) 2016 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "interpolateOnCloudOfPoints.H"
#include "volFields.H"
#include "addToRunTimeSelectionTable.H"
#include "OFstream.H"
#include "surfaceFields.H"



// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //

namespace Foam
{
namespace functionObjects
{
    defineTypeNameAndDebug(interpolateOnCloudOfPoints, 0);
    addToRunTimeSelectionTable(functionObject, interpolateOnCloudOfPoints, dictionary);
}
}


// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

Foam::functionObjects::interpolateOnCloudOfPoints::interpolateOnCloudOfPoints
(
    const word& name,
    const Time& runTime,
    const dictionary& dict
)
:
    fvMeshFunctionObject(name, runTime, dict),
    patchNames_(dict.lookup("patches"))
{
    read(dict);

}


// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //

Foam::functionObjects::interpolateOnCloudOfPoints::~interpolateOnCloudOfPoints()
{}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

bool Foam::functionObjects::interpolateOnCloudOfPoints::read(const dictionary& dict)
{
    return fvMeshFunctionObject::read(dict);
}


bool Foam::functionObjects::interpolateOnCloudOfPoints::execute()
{

    // open a file in write mode.
    ofstream outfile;
    outfile.open("afile.dat", std::ios::app);


    const volVectorField& U = mesh_.lookupObject<volVectorField>("U");
    const volScalarField& p = mesh_.lookupObject<volScalarField>("p");
    const surfaceScalarField & phi = mesh_.lookupObject<surfaceScalarField>("phi");

    scalar J = 0.0;

    forAll(patchNames_, i)
    {
       const label patchId = mesh_.boundaryMesh().findPatchID(patchNames_[i]);

       const fvPatchVectorField& Ubd = U.boundaryField()[patchId];
       const fvPatchScalarField& pbd = p.boundaryField()[patchId];
       const scalarField& phiBd = phi.boundaryField()[patchId];


       // surface area
       const scalarField S  = mag(mesh_.Sf().boundaryField()[patchId]);


       scalarField Jom = (mag(Ubd)*mag(Ubd)*0.5 + pbd);

       //integrate

       if (patchNames_[i] == "outlet")
       {
           J += - sum(Jom*S);
       }
       else
       {
           J += sum(Jom*S);
       }
       
       
    }



    outfile << mesh_.time().timeName() << "\t" << J << "\n";
    outfile.close();

    return true;
}


bool Foam::functionObjects::interpolateOnCloudOfPoints::write()
{
    return true;
}


// ************************************************************************* //
